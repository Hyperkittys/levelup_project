네, 이해했습니다. 이전 버전의 API 문서와 방금 전 답변을 결합하여 업데이트된 API 문서를 작성하겠습니다. 이 문서는 현재의 `app.js`를 기반으로 하며, 이전 버전의 구조를 참고하여 작성되었습니다.

# API 문서

## 기본 URL
```
http://localhost:3000
```

## 엔드포인트

### 1. 회원가입 (Register)
- **메소드**: POST
- **URL**: `/register`
- **설명**: 새로운 사용자를 등록합니다.
- **헤더**: 
  - Content-Type: application/json
- **요청 본문**:
  ```json
  {
    "username": "testuser",
    "password": "testpassword"
  }
  ```
- **응답 예시 (성공)**:
  - **상태 코드**: 201 Created
  - **본문**:
    ```json
    {
      "message": "사용자 등록 성공"
    }
    ```
- **응답 예시 (실패)**:
  - **상태 코드**: 400 Bad Request
  - **본문**:
    ```json
    {
      "message": "사용자 등록 실패"
    }
    ```

### 2. 로그인 (Login)
- **메소드**: POST
- **URL**: `/login`
- **설명**: 사용자 인증을 수행하고 JWT 토큰을 발급합니다.
- **헤더**:
  - Content-Type: application/json
- **요청 본문**:
  ```json
  {
    "username": "testuser",
    "password": "testpassword"
  }
  ```
- **응답 예시 (성공)**:
  - **상태 코드**: 200 OK
  - **본문**:
    ```json
    {
      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    }
    ```
- **응답 예시 (실패)**:
  - **상태 코드**: 400 Bad Request
  - **본문**:
    ```json
    {
      "message": "사용자를 찾을 수 없습니다"
    }
    ```
    또는
    ```json
    {
      "message": "비밀번호가 일치하지 않습니다"
    }
    ```

### 3. 보호된 리소스 접근 (Protected Resource)
- **메소드**: GET
- **URL**: `/protected`
- **설명**: 인증된 사용자만 접근 가능한 보호된 리소스입니다.
- **헤더**:
  - Authorization: Bearer <token>
- **응답 예시 (성공)**:
  - **상태 코드**: 200 OK
  - **본문**:
    ```json
    {
      "message": "보호된 데이터에 접근했습니다",
      "user": {
        "username": "testuser"
      }
    }
    ```
- **응답 예시 (실패)**:
  - **상태 코드**: 401 Unauthorized
  - **본문**: 없음

### 4. 정적 파일 서비스
- **메소드**: GET
- **URL**: `/`, `/auth.html`, `/dashboard.html`
- **설명**: 각각 index.html, auth.html, dashboard.html 파일을 제공합니다.
- **응답**: 해당 HTML 파일

## 인증
- JWT(JSON Web Token)를 사용합니다.
- 로그인 성공 시 발급된 토큰을 Authorization 헤더에 Bearer 스키마로 포함시켜 요청해야 합니다.

## 데이터베이스
- SQLite를 사용합니다.

## 보안
- 비밀번호는 bcrypt를 사용하여 해시화됩니다.

## 추가 정보
- 서버는 3000번 포트에서 실행됩니다.
- 정적 파일(HTML, JS, 이미지 등)은 `public` 폴더에서 제공됩니다.
- 로그아웃 기능은 클라이언트 측에서 처리됩니다 (로컬 스토리지에서 토큰 제거).

이 API 문서는 [이전 버전의 API 문서](https://documenter.getpostman.com/view/38758680/2sAXxLBZCU)를 참고하여 현재의 `app.js` 파일에 구현된 엔드포인트들을 반영하여 작성되었습니다.